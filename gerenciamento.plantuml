@startuml gerenciamento

title Gerenciamento de Exames

class Pessoa{
    - nome: String
    - idade: int
    - endereco: String
    - telefone: int
    - email: String
    + construtor(nome, idade, endereco, telefone, email)
    
}

class Profissional{
    - nome_profissional: String
    - cargo: String
    - registro_profissional: int
    - assinatura: String
    + construtor(nome_profissional, cargo, registro_profissional, assinatura)
}

class Paciente{
    - plano_saude: String
    - acompanhante: String
    - tempo_internacao: String
    - dieta: String
    - exames: Exames
    - contato_emergencia: ContatoEmergencia
    + construtor(plano_saude, acompanhante, tempo_internacao, exames, contato_emergencia)
}

class Observacao{
    - risco_exame: String
    - triagem: String
    - equipamento: String
    - medicamento: String
    + construtor(risco_exame, triagem, equipamento, medicamento)
}

class Laboratorio{
    - nome_laboratorio: String
    - endereco_laboratorio: String
    - cnpj: int
    - telefone_laboratorio: int
    - profissional: Profissional
    + construtor(nome_laboratorio, endereco_laboratorio, cnpj, telefone_laboratorio, profissional)
}

class Exames{
    - tempo_jejum: String
    - tipo_exame: String
    - horario: String
    - sala: int
    - observacao: Observacao
    - laboratorio: Laboratorio
    + construtor(tempo_jejum, tipo_exame, horario, sala, observacao, laboratorio)
}

class Dados{
    - tipo_sanguineo: String
    - alergia: String
    - uso_ilicito: String
    - uso_medicamento: String
    + construtor(tipo_sanguineo, alergia, uso_ilicito, uso_medicamento)
}

class ContatoEmergencia{
    - nome_familiar: String
    - telefone_familiar: int
    - parentesco: String
    - tipo_sanguineo_familiar: String
    + construtor(nome_familiar, telefone_familiar, parentesco, tipo_sanguineo_familiar)
}

Pessoa <|-- Paciente
Exames *-- Paciente
Dados <|-- Paciente
ContatoEmergencia o-- Paciente
Observacao *-- Exames
Laboratorio o-- Exames
Profissional o-- Laboratorio

@enduml