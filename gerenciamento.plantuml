@startuml  

class Pessoa {
   	- nome: String
   	- idade: Int
    - endereco: String
    - telefone: Int
    - email: String
   	+ contrutor(nome, idade, endereco, telefone, email)
}

class ContatoEmergencia {
   	- nome_familiar: String
   	- telefone_familiar: Int
    - parentesco: String
    - tipo_sanguineo_familiar: String
   	+ contrutor(nome_familiar, telefone_familiar, parentesco, tipo_sanguineo_familiar)
}

class Dados {
   	- tipo_sanguineo: String
   	- alergia: String
    - uso_ilicito: String
    - uso_medicamento: String
   	+ contrutor(tipo_sanguineo, alergia, uso_ilicito, uso_medicamento)
}

class Exames {
   	- tempo_jejum: Int
    - tipo_exame: String
    - horario: String
    - sala: Int
    - observacao: Observacao
    - laboratorio: Laboratorio
   	+ contrutor(tempo_jejum, tipo_exame, horario, sala, Observacao, Laboratorio)
}

class Paciente {
    - plano_saude: String
    - acompanhante: String
    - tempo_internacao: String
    - dieta: String
   	- pessoa: Pessoa
   	- exames: Exames
    - contatoEmergencia: ContatoEmergencia
    - dados: Dados
   	+ contrutor(plano_saude, acompanhante, tempo_internacao, dieta, Pessoa, Exames, ContatoEmergencia, Dados)
}

class Laboratorio {
   	- nome_laboratorio: String
   	- endereco_laboratorio: String
    - cnpj: Int
    - telefone_laboratorio: Int
    - profissional: Profissional
   	+ contrutor(nome_laboratorio, endereco_laboratorio, telefone_laboratorio, Profissional)
}

class Observacao {
   	- risco_exame: String
   	- triagem: String
    - equipamento: String
    - medicamento: String
   	+ contrutor(risco_exame, triagem, equipamento, medicamento)
}

class Profissional{
   	- nome_profissional: String
   	- cargo: String
    - registro_profissional: Int
    - assinatura: String
   	+ contrutor(nome_profissional, cargo, registro_profissional, assinatura)
}

Pessoa <|-- Paciente
Exames *-- Paciente
Dados <|-- Paciente
ContatoEmergencia o-- Paciente
Observacao *-- Exames
Laboratorio o-- Exames
Profissional o-- Laboratorio




@enduml